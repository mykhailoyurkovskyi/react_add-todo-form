{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoForm/TodoForm.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","cn","TodoList","todos","map","TodoForm","props","action","method","onSubmit","handleSubmit","type","value","formInputs","onChange","handleInputChange","placeholder","titleErrorMessage","handleUserIdChange","disabled","usersFromServer","userErrorMessage","getNewTodoId","Math","max","App","useState","todosFromServer","setTodos","setFormInputs","setTitleErrorMessage","setUserErrorMessage","todosWithUsers","find","u","event","target","input","preventDefault","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebc86fed.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\nimport User from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport Todo from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport Todo from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","import usersFromServer from '../../api/users';\n\ntype Props = {\n  handleSubmit: (event: React.FormEvent) => void;\n  handleInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  handleUserIdChange: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n\n  formInputs: {\n    title: string;\n    userId: number;\n  };\n\n  titleErrorMessage: string;\n  userErrorMessage: string;\n};\n\nexport const TodoForm: React.FC<Props> = (props: Props) => {\n  return (\n    <>\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={props.handleSubmit}\n      >\n\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              value={props.formInputs.title}\n              onChange={props.handleInputChange}\n              placeholder=\"Enter a title\"\n            />\n          </label>\n\n          {props.titleErrorMessage && (\n            <span className=\"error\">\n              {props.titleErrorMessage}\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={props.formInputs.userId}\n              onChange={props.handleUserIdChange}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n\n              {usersFromServer.map(user => (\n                <option\n                  value={user.id}\n                  key={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n\n            </select>\n          </label>\n\n          {props.userErrorMessage && (\n            <span className=\"error\">\n              {props.userErrorMessage}\n            </span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n    </>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport Todo from './types/Todo';\nimport { TodoForm } from './components/TodoForm/TodoForm';\n\nfunction getNewTodoId(todos: Todo[]): number {\n  const biggestId = Math.max(...todos.map((todo) => todo.id));\n\n  return biggestId + 1;\n}\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n  const [formInputs, setFormInputs] = useState({\n    title: '',\n    userId: 0,\n  });\n  const [titleErrorMessage, setTitleErrorMessage] = useState('');\n  const [userErrorMessage, setUserErrorMessage] = useState('');\n\n  const todosWithUsers = todos.map(todo => ({\n    ...todo,\n    user: usersFromServer.find(u => u.id === todo.userId),\n  }));\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const input = event.target.value;\n\n    setFormInputs({\n      ...formInputs,\n      title: input,\n    });\n\n    setTitleErrorMessage('');\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFormInputs({\n      ...formInputs,\n      userId: +event.target.value,\n    });\n\n    setUserErrorMessage('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!formInputs.title) {\n      setTitleErrorMessage('Please enter a title');\n    }\n\n    if (formInputs.userId <= 0) {\n      setUserErrorMessage('Please choose a user');\n    }\n\n    if (formInputs.userId <= 0 || !formInputs.title) {\n      return;\n    }\n\n    setTodos([\n      ...todos,\n      {\n        id: getNewTodoId(todos),\n        title: formInputs.title,\n        completed: false,\n        userId: formInputs.userId,\n      },\n    ]);\n\n    setFormInputs({\n      title: '',\n      userId: 0,\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <TodoForm\n        formInputs={formInputs}\n        titleErrorMessage={titleErrorMessage}\n        userErrorMessage={userErrorMessage}\n        handleUserIdChange={handleUserIdChange}\n        handleInputChange={handleInputChange}\n        handleSubmit={handleSubmit}\n      />\n      <TodoList todos={todosWithUsers} />\n\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}