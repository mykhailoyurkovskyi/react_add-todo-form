{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoForm/TodoForm.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","cn","TodoList","todos","map","TodoForm","props","titleErrorMessage","userErrorMessage","handleSubmit","handleInputChange","handleUserIdChange","action","method","onSubmit","type","value","onChange","placeholder","disabled","usersFromServer","getNewTodoId","Math","max","findUserById","users","find","App","useState","todosFromServer","setTodos","setTitle","setUserId","setTitleErrorMessage","setUserErrorMessage","todosWithUsers","event","target","input","preventDefault","ReactDOM","render","document","getElementById"],"mappings":"qNAAe,GACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BC3DI,GACb,CACEH,GAAI,EACJI,MAAO,qBACPC,WAAW,EACXC,OAAQ,GAEV,CACEN,GAAI,GACJI,MAAO,kBACPC,WAAW,EACXC,OAAQ,GAEV,CACEN,GAAI,EACJI,MAAO,qCACPC,WAAW,EACXC,OAAQ,I,uBCVCC,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClCP,EAAgBO,EAAhBP,KAAME,EAAUK,EAAVL,MAEd,OACE,mBAAGM,UAAU,WAAWC,KAAI,iBAAYP,GAAxC,SACGF,KCHMU,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAExCZ,EAIEY,EAJFZ,GACAI,EAGEQ,EAHFR,MACAC,EAEEO,EAFFP,UACAG,EACEI,EADFJ,KAGF,OACE,0BACE,UAASR,EACTS,UAAWI,IAAG,WAAY,CAAE,sBAAuBR,IAFrD,UAIE,oBAAII,UAAU,kBAAd,SACGL,IAEFI,GAAQ,cAAC,EAAD,CAAUA,KAAMA,QCjBlBM,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,OACE,yBAASN,UAAU,WAAnB,SACGM,EAAMC,KAAI,SAAAJ,GAAI,OACb,cAAC,EAAD,CACEA,KAAMA,GACDA,EAAKZ,UCAPiB,EAA4B,SAACC,GACxC,IACEd,EAOEc,EAPFd,MACAE,EAMEY,EANFZ,OACAa,EAKED,EALFC,kBACAC,EAIEF,EAJFE,iBACAC,EAGEH,EAHFG,aACAC,EAEEJ,EAFFI,kBACAC,EACEL,EADFK,mBAGF,OACE,qCACE,+CAEA,uBACEC,OAAO,aACPC,OAAO,OACPC,SAAUL,EAHZ,UAME,sBAAKZ,UAAU,QAAf,UACE,kCACG,UACD,uBACEkB,KAAK,OACL,UAAQ,aACRC,MAAOxB,EACPyB,SAAUP,EACVQ,YAAY,qBAIfZ,EAAMC,mBACL,sBAAMV,UAAU,QAAhB,SACGU,OAKP,sBAAKV,UAAU,QAAf,UACE,kCACG,SACD,yBACE,UAAQ,aACRmB,MAAOtB,EACPuB,SAAUN,EAHZ,UAKE,wBAAQK,MAAM,IAAIG,UAAQ,EAA1B,2BAECC,EAAgBhB,KAAI,SAAAR,GAAI,OACvB,wBACEoB,MAAOpB,EAAKR,GADd,SAIGQ,EAAKP,MAFDO,EAAKR,aASjBkB,EAAME,kBACL,sBAAMX,UAAU,QAAhB,SACGW,OAKP,wBAAQO,KAAK,SAAS,UAAQ,eAA9B,wBCzER,SAASM,EAAalB,GAGpB,OAFkBmB,KAAKC,IAAL,MAAAD,KAAI,YAAQnB,EAAMC,KAAI,SAACJ,GAAD,OAAUA,EAAKZ,QAEpC,EAGrB,SAASoC,EAAaC,EAAe/B,GACnC,OAAO+B,EAAMC,MAAK,SAAA9B,GAAI,OAAIA,EAAKR,KAAOM,MAAW,KAG5C,IAAMiC,EAAM,WACjB,MAA0BC,mBAASC,GAAnC,mBAAO1B,EAAP,KAAc2B,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOpC,EAAP,KAAcuC,EAAd,KACA,EAA4BH,mBAAS,GAArC,mBAAOlC,EAAP,KAAesC,EAAf,KACA,EAAkDJ,mBAAS,IAA3D,mBAAOrB,EAAP,KAA0B0B,EAA1B,KACA,EAAgDL,mBAAS,IAAzD,mBAAOpB,EAAP,KAAyB0B,EAAzB,KAEMC,EAAiBhC,EAAMC,KAAI,SAAAJ,GAAI,kCAChCA,GADgC,IAEnCJ,KAAM4B,EAAaJ,EAAiBpB,EAAKN,aAkD3C,OACE,sBAAKG,UAAU,MAAf,UACE,cAAC,EAAD,CACEL,MAAOA,EACPE,OAAQA,EACRa,kBAAmBA,EACnBC,iBAAkBA,EAClBG,mBA9CqB,SAACyB,GAC1BJ,GAAWI,EAAMC,OAAOrB,OAExBkB,EAAoB,KA4ChBxB,kBAvDoB,SAAC0B,GACzB,IAAME,EAAQF,EAAMC,OAAOrB,MAE3Be,EAASO,GAETL,EAAqB,KAmDjBxB,aArCe,SAAC2B,GACpBA,EAAMG,iBAED/C,GACHyC,EAAqB,wBAGnBvC,GAAU,GACZwC,EAAoB,wBAGlBxC,GAAU,IAAMF,IAIpBsC,EAAS,GAAD,mBACH3B,GADG,CAEN,CACEf,GAAIiC,EAAalB,GACjBX,QACAC,WAAW,EACXC,aAzBJqC,EAAS,IACTC,EAAU,OA0CR,cAAC,EAAD,CAAU7B,MAAOgC,QCvFvBK,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.23e8547d.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\nimport User from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport Todo from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport Todo from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","import usersFromServer from '../../api/users';\n\ntype Props = {\n  handleSubmit: (event: React.FormEvent) => void;\n  handleInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  handleUserIdChange: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n\n  title: string;\n  userId: number;\n\n  titleErrorMessage: string;\n  userErrorMessage: string;\n};\n\nexport const TodoForm: React.FC<Props> = (props: Props) => {\n  const {\n    title,\n    userId,\n    titleErrorMessage,\n    userErrorMessage,\n    handleSubmit,\n    handleInputChange,\n    handleUserIdChange,\n  } = props;\n\n  return (\n    <>\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              value={title}\n              onChange={handleInputChange}\n              placeholder=\"Enter a title\"\n            />\n          </label>\n\n          {props.titleErrorMessage && (\n            <span className=\"error\">\n              {titleErrorMessage}\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={userId}\n              onChange={handleUserIdChange}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n\n              {usersFromServer.map(user => (\n                <option\n                  value={user.id}\n                  key={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n\n            </select>\n          </label>\n\n          {props.userErrorMessage && (\n            <span className=\"error\">\n              {userErrorMessage}\n            </span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n    </>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport Todo from './types/Todo';\nimport { TodoForm } from './components/TodoForm/TodoForm';\nimport User from './types/User';\n\nfunction getNewTodoId(todos: Todo[]): number {\n  const biggestId = Math.max(...todos.map((todo) => todo.id));\n\n  return biggestId + 1;\n}\n\nfunction findUserById(users: User[], userId: number): User | null {\n  return users.find(user => user.id === userId) || null;\n}\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [titleErrorMessage, setTitleErrorMessage] = useState('');\n  const [userErrorMessage, setUserErrorMessage] = useState('');\n\n  const todosWithUsers = todos.map(todo => ({\n    ...todo,\n    user: findUserById(usersFromServer, todo.userId),\n  }));\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const input = event.target.value;\n\n    setTitle(input);\n\n    setTitleErrorMessage('');\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n\n    setUserErrorMessage('');\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title) {\n      setTitleErrorMessage('Please enter a title');\n    }\n\n    if (userId <= 0) {\n      setUserErrorMessage('Please choose a user');\n    }\n\n    if (userId <= 0 || !title) {\n      return;\n    }\n\n    setTodos([\n      ...todos,\n      {\n        id: getNewTodoId(todos),\n        title,\n        completed: false,\n        userId,\n      },\n    ]);\n\n    resetForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <TodoForm\n        title={title}\n        userId={userId}\n        titleErrorMessage={titleErrorMessage}\n        userErrorMessage={userErrorMessage}\n        handleUserIdChange={handleUserIdChange}\n        handleInputChange={handleInputChange}\n        handleSubmit={handleSubmit}\n      />\n      <TodoList todos={todosWithUsers} />\n\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}